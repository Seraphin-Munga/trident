pool:
    vmImage: 'ubuntu-18.04'
steps:
    - task: DeleteFiles@1
      displayName: 'Delete JUnit files'
      inputs:
          SourceFolder: $(System.DefaultWorkingDirectory)/junit
          Contents: 'TESTS*.xml'
    - task: UseNode@1
      displayName: 'Install node'
    - task: Npm@1
      displayName: 'Install modules'
      inputs:
          command: 'install'
    - task: Npm@1
      displayName: 'Run linting'
      inputs:
          command: 'custom'
          customCommand: run lint
    - task: Npm@1
      displayName: 'Run testing'
      inputs:
          command: 'custom'
          customCommand: run test-ci
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage results'
      condition: succeededOrFailed()
      inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/trident/cobertura-coverage.xml'
          reportDirectory: 'coverage'
          failIfCoverageEmpty: true
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: succeededOrFailed()
      inputs:
          searchFolder: $(System.DefaultWorkingDirectory)/junit
          testRunTitle: Ionic
          testResultsFormat: JUnit
          testResultsFiles: "**/TESTS*.xml"
    - task: Npm@1
      displayName: 'Run staging build'
      inputs:
          command: 'custom'
          customCommand: run build-staging
    - task: Npm@1
      displayName: 'Run production build'
      condition: eq(variables['Build.SourceBranchName'], 'master')
      inputs:
          command: 'custom'
          customCommand: run build-prod
    - task: PublishBuildArtifacts@1
      displayName: 'Push build artifact'
      condition: or(eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'master'))
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/dist/trident-front-end'
        ArtifactName: trident-front-end
